/* tslint:disable */
/* eslint-disable */
/**
 * SCUBA
 * Scality Consumption Utilization and Billing API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface MetricsClass
 */
export interface MetricsClass {}

/**
 * ScubaApi - axios parameter creator
 * @export
 */
export const ScubaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {MetricsClass} metricsClass
         * @param {any} resourceName
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestMetrics: async (
            metricsClass: MetricsClass,
            resourceName: any,
            body?: any,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'metricsClass' is not null or undefined
            assertParamExists('getLatestMetrics', 'metricsClass', metricsClass);
            // verify required parameter 'resourceName' is not null or undefined
            assertParamExists('getLatestMetrics', 'resourceName', resourceName);
            const localVarPath = `/metrics/{metricsClass}/{resourceName}/latest`
                .replace(`{${'metricsClass'}}`, encodeURIComponent(String(metricsClass)))
                .replace(`{${'resourceName'}}`, encodeURIComponent(String(resourceName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {MetricsClass} metricsClass
         * @param {any} resourceName
         * @param {any} metricsDate
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics: async (
            metricsClass: MetricsClass,
            resourceName: any,
            metricsDate: any,
            body?: any,
            options: AxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'metricsClass' is not null or undefined
            assertParamExists('getMetrics', 'metricsClass', metricsClass);
            // verify required parameter 'resourceName' is not null or undefined
            assertParamExists('getMetrics', 'resourceName', resourceName);
            // verify required parameter 'metricsDate' is not null or undefined
            assertParamExists('getMetrics', 'metricsDate', metricsDate);
            const localVarPath = `/metrics/{metricsClass}/{resourceName}/{metricsDate}`
                .replace(`{${'metricsClass'}}`, encodeURIComponent(String(metricsClass)))
                .replace(`{${'resourceName'}}`, encodeURIComponent(String(resourceName)))
                .replace(`{${'metricsDate'}}`, encodeURIComponent(String(metricsDate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = '/health/deep';
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
            };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ScubaApi - functional programming interface
 * @export
 */
export const ScubaApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ScubaApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {MetricsClass} metricsClass
         * @param {any} resourceName
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestMetrics(
            metricsClass: MetricsClass,
            resourceName: any,
            body?: any,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestMetrics(
                metricsClass,
                resourceName,
                body,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {MetricsClass} metricsClass
         * @param {any} resourceName
         * @param {any} metricsDate
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetrics(
            metricsClass: MetricsClass,
            resourceName: any,
            metricsDate: any,
            body?: any,
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetrics(
                metricsClass,
                resourceName,
                metricsDate,
                body,
                options,
            );
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHealthCheck(
            options?: AxiosRequestConfig,
        ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};

/**
 * ScubaApi - factory interface
 * @export
 */
export const ScubaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScubaApiFp(configuration);
    return {
        /**
         *
         * @param {MetricsClass} metricsClass
         * @param {any} resourceName
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestMetrics(metricsClass: MetricsClass, resourceName: any, body?: any, options?: any): AxiosPromise<void> {
            return localVarFp
                .getLatestMetrics(metricsClass, resourceName, body, options)
                .then(request => request(axios, basePath));
        },
        /**
         *
         * @param {MetricsClass} metricsClass
         * @param {any} resourceName
         * @param {any} metricsDate
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics(
            metricsClass: MetricsClass,
            resourceName: any,
            metricsDate: any,
            body?: any,
            options?: any,
        ): AxiosPromise<void> {
            return localVarFp
                .getMetrics(metricsClass, resourceName, metricsDate, body, options)
                .then(request => request(axios, basePath));
        },
    };
};

/**
 * ScubaApi - object-oriented interface
 * @export
 * @class ScubaApi
 * @extends {BaseAPI}
 */
export class ScubaApi extends BaseAPI {
    /**
     *
     * @param {MetricsClass} metricsClass
     * @param {any} resourceName
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScubaApi
     */
    public getLatestMetrics(metricsClass: MetricsClass, resourceName: any, body?: any, options?: AxiosRequestConfig) {
        return ScubaApiFp(this.configuration)
            .getLatestMetrics(metricsClass, resourceName, body, options)
            .then(request => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {MetricsClass} metricsClass
     * @param {any} resourceName
     * @param {any} metricsDate
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScubaApi
     */
    public getMetrics(
        metricsClass: MetricsClass,
        resourceName: any,
        metricsDate: any,
        body?: any,
        options?: AxiosRequestConfig,
    ) {
        return ScubaApiFp(this.configuration)
            .getMetrics(metricsClass, resourceName, metricsDate, body, options)
            .then(request => request(this.axios, this.basePath));
    }

    /**
     * Health check endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScubaApi
     */
    public healthCheck(options?: AxiosRequestConfig) {
        return ScubaApiFp(this.configuration)
            .getHealthCheck(options)
            .then(request => request(this.axios, this.basePath));
    }
}
